# Each cell in CPP has declare_params, declare_io, configure and process functions.

ros_pc_subscriber:
  type: ecto_sensor_msgs::Subscriber_PointCloud2
  queue_size: 2
  topic_name: /camera/depth_registered/points
msg_to_pcl:
  type: ecto_rbo_pcl::Message2PointCloud
  inputs:
    input: ros_pc_subscriber/output
create_tf:
  type: ecto_rbo_pcl::CreateTF
  position: [0, 0, 0]
  rotation_xyzw: [0, 0, 0, 1]
tf_send_camera:
  type: ecto_rbo_pcl::BroadcastTF
  inputs:
    transform: create_tf/transform
  source_frame: camera_rgb_optical_frame
  target_frame: base_frame

crop_box:
  type: ecto::pcl::PclCell<ecto_rbo_pcl::PassThroughOrganized>
  inputs:
    input: msg_to_pcl/output
  filter_field_name: z
  filter_limit_max: 1.0
  filter_limit_min: 0
  filter_limit_negative: false

normal_estimation:
  type: ecto::pcl::PclCell<ecto_rbo_pcl::NormalEstimationIntegral>
  inputs:
    input: crop_box/output
  estimation_method: 0
  max_depth_change_factor: 0.05
  smoothing_size: 30
flood_fill:
  type: ecto::pcl::PclCellWithNormals<ecto_rbo_pcl::FloodFill>
  inputs:
    input: crop_box/output
    normals: normal_estimation/output
  angular_threshold: 0.1859879
  curvature_distance_threshold: 0.15
  curvature_threshold: 0.017
  distance_threshold: 0.05
  min_inliers: 50
  normal_distance_threshold: 0.12
  rviz_prefix: flood_fill_segmentation

# ------------------------------------------------------------------------
table_fits:
  type: ecto::pcl::PclCellWithNormals<ecto_rbo_pcl::PlaneFits>
  inputs:
    clusters: flood_fill/clusters
    input: crop_box/output
    normals: normal_estimation/output
  distance_threshold: 45.05
  max_size: 10.24
  min_boxness: 0.0
  min_inlier_ratio: 0.0
  min_size: 0.00
  weight_contour: 0.0
  polygon_approximation_epsilon: 40.0

# ------------------------------------------------------------------------
ifco_grasp:
  type: ecto::pcl::PclCellWithNormals<ecto_rbo_grasping::IfcoGrasp>
  inputs:
    input: crop_box/output
    normals: normal_estimation/output
    bounded_planes: table_fits/bounded_models
    bounded_planes_biggest: table_fits/bounded_model_biggest
  plane_id: -1
  tableDist: 0.2

# ------------------------------------------------------------------------
# Clean up transform data for later use
tf_to_vector_table:
  type: ecto_rbo_pcl::TF2Vector
  inputs:
    transform: ifco_grasp/ifco_transform
  column_index: 2
  negate: false
wrap_in_vector_table:
  type: ecto_rbo_pcl::WrapVector3fInVector
  inputs:
    input: tf_to_vector_table/vector

# ------------------------------------------------------------------------
inside_ifco:
  type: ecto::pcl::PclCell<ecto_rbo_pcl::CropBox>
  inputs:
    input: crop_box/output
    transform: ifco_grasp/ifco_transform
  default_min: [-0.24,  -0.16, 0.02, 0]
  default_max: [0.24,  0.16,  0.20, 0]
  publish_rviz_markers: true

# ------------------------------------------------------------------------
# Cluster the objects in the IFCO
region_growing_rgb:
  type: ecto::pcl::PclCell<ecto_rbo_pcl::RegionGrowingRGB>
  inputs:
    input: crop_box/output
    indices: inside_ifco/indices2
  min_cluster_size: 350
  distance_threshold: 1000
  point_color_threshold: 35.0
  region_color_threshold: 50.0

# ------------------------------------------------------------------------
# Pick one object - the closest to the camera
filter_closest_object:
  type: ecto::pcl::PclCell<ecto_rbo_pcl::ExtractClosestCluster>
  inputs:
    input: crop_box/output
    clusters: region_growing_rgb/output
    transform: ifco_grasp/ifco_transform
  size_weight: 0

# ------------------------------------------------------------------------
# Calculate the centroid and the bounding box
calculate_centroids:
  type: ecto::pcl::PclCell<ecto_rbo_pcl::Centroid>
  inputs:
    input: crop_box/output
    clusters: filter_closest_object/closest_cluster
bbox_fits:
  type: ecto::pcl::PclCell<ecto_rbo_pcl::PlaneFits2D>
  inputs:
    input: crop_box/output
    clusters: filter_closest_object/closest_cluster
    normal: tf_to_vector_table/vector
bbox_to_axis:
  type: ecto_rbo_pcl::TFs2Vectors
  inputs:
    transforms: bbox_fits/transforms
  column_index: 0
  negate: false

# Broadcast object location
take_first_tf:
  type: ecto_rbo_pcl::Vector2TF
  inputs:
    input: bbox_fits/transforms
tf_send_object:
  type: ecto_rbo_pcl::BroadcastTF
  inputs:
    transform: take_first_tf/output
  source_frame: camera_rgb_optical_frame
  target_frame: object

# ------------------------------------------------------------------------
# Create top grasp primitive
create_top_down_grasps:
  type: ecto_rbo_grasping::CreateGrasps
  inputs:
    header: msg_to_pcl/header
    positions: calculate_centroids/centroids
    approach_vectors: wrap_in_vector_table/vector
    roll_vectors: bbox_to_axis/vectors
  strategy: 10  # SQUEEZE
  pregrasp_configuration: 2 # SPHERE
  roll_offset: 0 #-1.5707963267948966   #3.141592653589793

# ------------------------------------------------------------------------
# Create slide primitives
planar_manifolds:
  type: ecto::pcl::PclCellWithNormals<ecto_rbo_grasping::ManifoldsPlanar>
  inputs:
    input: crop_box/output
    normals: normal_estimation/output
    bounded_planes: ifco_grasp/ifco_planes_biggest
  all_in_plane_orientations: true 
  rotation: 0
 
# ------------------------------------------------------------------------
# Create wall grasp primitives
wall_grasps:
  type: ecto::pcl::PclCellWithNormals<ecto_rbo_grasping::WallGrasps>
  inputs:
    input: crop_box/output
    normals: normal_estimation/output
    polygons: ifco_grasp/ifco_polygons
    bounded_planes: ifco_grasp/ifco_planes
  min_points: 200





# ------------------------------------------------------------------------
tf_send_wall0:
  type: ecto_rbo_pcl::BroadcastTF
  inputs:
    transform: ifco_grasp/ifco_wall_0_transform
  source_frame: camera_rgb_optical_frame
  target_frame: ifcoWall0

# ------------------------------------------------------------------------
tf_send_wall1:
  type: ecto_rbo_pcl::BroadcastTF
  inputs:
    transform: ifco_grasp/ifco_wall_1_transform
  source_frame: camera_rgb_optical_frame
  target_frame: ifcoWall1 

# ------------------------------------------------------------------------
tf_send_ifco:
  type: ecto_rbo_pcl::BroadcastTF
  inputs:
    transform: ifco_grasp/ifco_transform
  source_frame: camera_rgb_optical_frame
  target_frame: ifco
